const tape = require("tape"),
      swoopy = require("../"),
      round = require("./utils/roundArray");

tape("arc(a, b) returns a semicricle from a to b ", test => {
  test.deepEqual(
    round(swoopy.arc([0, 0], [10, 0]), 3),
    round([ [ 0, 0 ], [ 0.169, 1.172 ], [ 0.521, 2.189 ], [ 1.029, 3.048 ], [ 1.667, 3.752 ], [ 3.229, 4.69 ], [ 5, 5.002 ], [ 6.771, 4.69 ], [ 8.333, 3.752 ], [ 8.971, 3.048 ], [ 9.479, 2.189 ], [ 9.831, 1.172 ], [ 10, 0 ] ], 3)
  );
  test.end();
});

tape("arc(a, b, offset) accepts offsets", test => {
  test.deepEqual(
    round(swoopy.arc([0, 0], [10, 0], -.5), 3),
    round([ [ 0, 0 ], [ 1.09, -1.094 ], [ 2.318, -1.876 ], [ 3.636, -2.345 ], [ 5, -2.501 ], [ 6.364, -2.345 ], [ 7.682, -1.876 ], [ 8.91, -1.094 ], [ 10, 0 ] ], 3)
  );
  test.deepEqual(
    round(swoopy.arc([0, 0], [10, 0], 0), 3),
    round([ [ 0, 0 ], [ 1.66, 0 ], [ 2.969, 0 ], [ 5, 0 ], [ 7.031, 0 ], [ 8.34, 0 ], [ 10, 0 ] ], 3)
  );
  test.deepEqual(
    round(swoopy.arc([0, 0], [10, 0], .5), 3),
    round([ [ 0, 0 ], [ 1.09, 1.094 ], [ 2.318, 1.876 ], [ 3.636, 2.345 ], [ 5, 2.501 ], [ 6.364, 2.345 ], [ 7.682, 1.876 ], [ 8.91, 1.094 ], [ 10, 0 ] ], 3)
  );
  test.deepEqual(
    round(swoopy.arc([0, 0], [10, 0], -1), 3),
    round([ [ 0, 0 ], [ 0.169, -1.172 ], [ 0.521, -2.189 ], [ 1.029, -3.048 ], [ 1.667, -3.752 ], [ 3.229, -4.69 ], [ 5, -5.002 ], [ 6.771, -4.69 ], [ 8.333, -3.752 ], [ 8.971, -3.048 ], [ 9.479, -2.189 ], [ 9.831, -1.172 ], [ 10, 0 ] ], 3)
  );
  test.end();
});
const tape = require("tape"),
      swoopy = require("../"),
      round = require("./utils/roundArray");

tape("arc(a, b) returns a semicricle from a to b ", test => {
  test.deepEqual(
    round(swoopy.arc([0, 0], [10, 0]), 3),
    round([ [ 0, 0 ], [ 0.2, 1.4 ], [ 1, 3 ], [ 1.712, 3.767 ], [ 2.647, 4.412 ], [ 3.769, 4.846 ], [ 5, 5 ], [ 6.231, 4.846 ], [ 7.353, 4.412 ], [ 8.288, 3.767 ], [ 9, 3 ], [ 9.8, 1.4 ], [ 10, 0 ] ], 3)
  );
  test.end();
});

tape("arc(a, b, offset) accepts offsets", test => {
  test.deepEqual(
    round(swoopy.arc([0, 0], [10, 0], -.5), 3),
    round([ [ 0, 0 ], [ 0.89, -0.959 ], [ 2.059, -1.765 ], [ 3.462, -2.308 ], [ 5, -2.5 ], [ 6.538, -2.308 ], [ 7.941, -1.765 ], [ 9.11, -0.959 ], [ 10, 0 ] ], 3)
  );
  test.deepEqual(
    round(swoopy.arc([0, 0], [10, 0], 0), 3),
    round([ [ 0, 0 ], [ 5, 0 ], [ 10, 0 ] ], 3)
  );
  test.deepEqual(
    round(swoopy.arc([0, 0], [10, 0], .5), 3),
    round([ [ 0, 0 ], [ 0.89, 0.959 ], [ 2.059, 1.765 ], [ 3.462, 2.308 ], [ 5, 2.5 ], [ 6.538, 2.308 ], [ 7.941, 1.765 ], [ 9.11, 0.959 ], [ 10, 0 ] ], 3)
  );
  test.deepEqual(
    round(swoopy.arc([0, 0], [10, 0], -1), 3),
    round([ [ 0, 0 ], [ 0.2, -1.4 ], [ 1, -3 ], [ 1.712, -3.767 ], [ 2.647, -4.412 ], [ 3.769, -4.846 ], [ 5, -5 ], [ 6.231, -4.846 ], [ 7.353, -4.412 ], [ 8.288, -3.767 ], [ 9, -3 ], [ 9.8, -1.4 ], [ 10, 0 ] ], 3)
  );
  test.end();
});
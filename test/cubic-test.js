const tape = require("tape"),
      swoopy = require("../"),
      round = require("./utils/roundArray");

tape("cubic(a, b) returns a cubic Bezier curve from point a to b ", test => {
  test.deepEqual(
    round(swoopy.cubic([0, 0], [10, 0]), 3),
    round([ [ 0, 0 ], [ 0.728, 0.769 ], [ 1.414, 1.23 ], [ 2.065, 1.428 ], [ 2.688, 1.406 ], [ 3.867, 0.879 ], [ 5, 0 ], [ 6.133, -0.879 ], [ 7.313, -1.406 ], [ 7.935, -1.428 ], [ 8.586, -1.23 ], [ 9.272, -0.769 ], [ 10, 0 ] ], 3)
  );
  test.end()
});

tape("cubic(a, b, offset) accepts offsets", test => {
  test.deepEqual(
    round(swoopy.cubic([0, 0], [10, 0], -.5), 3),
    round([ [ 0, 0 ], [ 0.728, -0.769 ], [ 1.414, -1.23 ], [ 2.065, -1.428 ], [ 2.688, -1.406 ], [ 3.867, -0.879 ], [ 5, 0 ], [ 6.133, 0.879 ], [ 7.313, 1.406 ], [ 7.935, 1.428 ], [ 8.586, 1.23 ], [ 9.272, 0.769 ], [ 10, 0 ] ], 3)
  )
  test.deepEqual(
    round(swoopy.cubic([0, 0], [10, 0], 0), 3),
    round([ [ 0, 0 ], [ 2.688, 0 ], [ 5, 0 ], [ 7.313, 0 ], [ 10, 0 ] ], 3)
  );
  test.deepEqual(
    round(swoopy.cubic([0, 0], [10, 0], 1), 3),
    round([ [ 0, 0 ], [ 0.728, 1.538 ], [ 1.414, 2.461 ], [ 2.065, 2.856 ], [ 2.688, 2.813 ], [ 3.286, 2.417 ], [ 3.867, 1.758 ], [ 5, 0 ], [ 6.133, -1.758 ], [ 6.714, -2.417 ], [ 7.313, -2.813 ], [ 7.935, -2.856 ], [ 8.586, -2.461 ], [ 9.272, -1.538 ], [ 10, 0 ] ], 3)
  );
  test.deepEqual(
    round(swoopy.cubic([0, 0], [10, 0], -1), 3),
    round([ [ 0, 0 ], [ 0.728, -1.538 ], [ 1.414, -2.461 ], [ 2.065, -2.856 ], [ 2.687, -2.813 ], [ 3.286, -2.417 ], [ 3.867, -1.758 ], [ 5, 0 ], [ 6.133, 1.758 ], [ 6.714, 2.417 ], [ 7.313, 2.813 ], [ 7.935, 2.856 ], [ 8.586, 2.461 ], [ 9.272, 1.538 ], [ 10, 0 ] ], 3)
  );
  test.end();
});

tape("cubic(a, b, ..., precision) accepts precision", test => {
  test.deepEqual(
    round(swoopy.cubic([0, 0], [10, 0], 0.5, 0.1), 3),
    round([ [ 0, 0 ], [ 0.728, 0.769 ], [ 1.414, 1.23 ], [ 2.065, 1.428 ], [ 2.688, 1.406 ], [ 3.867, 0.879 ], [ 5, 0 ], [ 6.133, -0.879 ], [ 7.313, -1.406 ], [ 7.935, -1.428 ], [ 8.586, -1.23 ], [ 9.272, -0.769 ], [ 10, 0 ] ], 3)
  );
  test.deepEqual(
    round(swoopy.cubic([0, 0], [10, 0], 0.5, 0.01), 3),
    round([ [ 0, 0 ], [ 0.186, 0.224 ], [ 0.369, 0.426 ], [ 0.55, 0.607 ], [ 0.728, 0.769 ], [ 1.076, 1.035 ], [ 1.414, 1.23 ], [ 1.744, 1.36 ], [ 2.065, 1.428 ], [ 2.38, 1.442 ], [ 2.688, 1.406 ], [ 2.989, 1.327 ], [ 3.286, 1.208 ], [ 3.578, 1.057 ], [ 3.867, 0.879 ], [ 4.437, 0.461 ], [ 5, 0 ], [ 5.563, -0.461 ], [ 6.133, -0.879 ], [ 6.422, -1.057 ], [ 6.714, -1.208 ], [ 7.011, -1.327 ], [ 7.313, -1.406 ], [ 7.62, -1.442 ], [ 7.935, -1.428 ], [ 8.256, -1.36 ], [ 8.586, -1.23 ], [ 8.924, -1.035 ], [ 9.272, -0.769 ], [ 9.45, -0.607 ], [ 9.631, -0.426 ], [ 9.814, -0.224 ], [ 10, 0 ] ], 3)
  );
  test.deepEqual(
    round(swoopy.cubic([0, 0], [10, 0], 0.5, 1), 3),
    round([ [ 0, 0 ], [ 2.688, 1.406 ], [ 5, 0 ], [ 7.313, -1.406 ], [ 10, 0 ] ], 3)
  );
  test.end();
});
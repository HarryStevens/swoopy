const tape = require("tape"),
      swoopy = require("../"),
      round = require("./utils/roundArray");

tape("quad(a, b) returns a quadratic Bezier curve from point a to b ", test => {
  test.deepEqual(
    round(swoopy.quad([0, 0], [10, 0]), 3),
    round([[0,0],[1.0000000000000002,0.9000000000000001],[2.0000000000000004,1.6000000000000003],[3,2.1],[4,2.4],[5,2.5],[6,2.4],[7,2.1],[8,1.5999999999999996],[9.000000000000002,0.8999999999999998],[10,0]], 3)
  );
  test.end();
});

tape("quad(a, b, offset) accepts offsets", test => {
  test.deepEqual(
    round(swoopy.quad([0, 0], [10, 0], -.5), 3),
    round([[0,0],[1.0000000000000002,-0.9000000000000001],[2.0000000000000004,-1.6000000000000003],[3,-2.1],[4,-2.4],[5,-2.5],[6,-2.4],[7,-2.1],[8,-1.5999999999999996],[9.000000000000002,-0.8999999999999998],[10,0]], 3)
  );
  test.deepEqual(
    round(swoopy.quad([0, 0], [10, 0], 0), 3),
    round([[0,0],[1.0000000000000002,0],[2.0000000000000004,0],[3,0],[4,0],[5,0],[6,0],[7,0],[8,0],[9.000000000000002,0],[10,0]], 3)
  );
  test.deepEqual(
    round(swoopy.quad([0, 0], [10, 0], 1), 3),
    round([[0,0],[1.0000000000000002,1.8000000000000003],[2.0000000000000004,3.2000000000000006],[3,4.2],[4.000000000000001,4.8],[5,5],[6,4.8],[7,4.2],[8.000000000000002,3.1999999999999993],[9.000000000000002,1.7999999999999996],[10,0]], 3)
  );
  test.deepEqual(
    round(swoopy.quad([0, 0], [10, 0], -1), 3),
    round([[0,0],[0.9999999999999999,-1.8000000000000003],[2,-3.2000000000000006],[2.9999999999999996,-4.2],[4,-4.8],[5,-5],[5.999999999999999,-4.8],[6.999999999999999,-4.2],[8,-3.1999999999999993],[9.000000000000002,-1.7999999999999996],[10,0]], 3)
  );
  test.end();
});